//#include <bits/stdc++.h>
#include<stdio.h>
// creating a structure of a process
struct process {
    int id;
    int BT;
    int BTbackup;   // for backup purpose to print in last
    int WT;
    int TAT;
    int CT;
};
// creating object's array for 3 processes.
struct process p[3];

// variable to find the total time
int totaltime = 0;
int prefinaltotal = 0;

// comparator function for sort()
int compare(struct process p1,struct process p2)
{
    // compare the id of two processes to break tie
    return p1.id< p2.id;
}

// computing the largest burst Time among all the available processes
int findlargest()
{
    int max = 0, i;
    for (i = 0; i < 3; i++)
    {
        if (p[i].BT > p[max].BT)
            max = i;
        else if(p[max].BT==p[i].BT)
        {
            if(compare(p[i],p[max]))
                max=i;
        }
        else
            continue;
    }
    // returning the index of the process having the largest BT
    return max;
}

// function to find the completion time of each process
void findCT()
{
    int index;
    int flag = 0;
    while (1)
    {
        index = findlargest();
        printf("Process executing at time %d is: P%d\n",totaltime,index + 1);
        p[index].BT -= 1;
        totaltime += 1;
        if (p[index].BT == 0)
        {
            p[index].CT = totaltime;
            printf(" Process P%d is completed at %d\n",p[index].id,totaltime);
        }
        // loop termination condition
        if (totaltime == prefinaltotal)
            break;
    }
}


