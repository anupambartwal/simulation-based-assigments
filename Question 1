
#include<stdio.h>
//A structure for storing all details of processes.
struct process
{
    int AT,BT,WT,BTbackup,CT,TAT,runcount;
}p[10];//an array of objects of struct process
int totaltime = 0;
int prefinaltotal = 0;
int n;
void input()
{
    int i;
	printf("\nEnter number of processes");
	scanf("%d",&n);
	printf("\nEnter arrival time of processes:");
	for(i=0;i<n;i++)
	{
		printf("\nFor process %d:",i+1);
		scanf("%d",&p[i].AT);
	}
	printf("\nEnter burst time for processes:");
	for(i=0;i<n;i++)
	{
		printf("\nFor process %d:",i+1);
		scanf("%d",&p[i].BT);
		p[i].BTbackup=p[i].BTbackup;
		prefinaltotal += p[i].BT;
	}
}

int compare(int i,int j)
{
    // compare the id of two processes to break tie
    return p[i].AT< p[j].AT;
}
int findsmallest()
{
    int min = n, i;
    p[min].BT=9999999;
    for (i = 0; i <n; i++)
    {
        if(p[i].runcount==1)
        {
            continue;
        }
        if (p[i].BT < p[min].BT)
            min = i;
        else if(p[min].BT==p[i].BT)
        {
            if(compare(i,min))
            min=i;
        }
        else
            continue;
    }
    // returning the index of the process having the largest BT
    return min;
}
void SJF()
{
    int index;
    int flag = 0;
    for(index=0;index<n;index++)
    {
        p[index].runcount=0;
    }
    while (1)
    {
        index = findsmallest();
        p[index].runcount=1;
        printf("Process executing at time %d is: P%d\n",totaltime,index + 1);
        totaltime += p[index].BT;
        p[index].BT =0;
        p[index].CT = totaltime;
        printf(" Process P%d is completed at %d\n",index+1,totaltime);
        // loop termination condition
        if (totaltime == prefinaltotal)
            break;
    }
}
void RR(int tq)
{
    int count,remain=n,flag=0;
    for(count=0;count<n;count++)
    {
        p[count].runcount=0;
    }


